// Generated by CoffeeScript 1.9.2
var APP, ARouter, HTML, Link, RRouter, React, handlerCache, renderOrUpdatePage, router;

React = require('lib/react');

ARouter = require('lib/agnostic-router');

router = null;

handlerCache = {};

HTML = null;

RRouter = function(routes, htmlComponent) {
  router = ARouter(routes);
  HTML = htmlComponent;
  router.listenToPopState = function() {
    return window.onpopstate = function(e) {
      var handler;
      if (e.state) {
        handler = handlerCache[location.href];
        return renderOrUpdatePage(handler, JSON.parse(e.state));
      } else {
        return router.match(location.href, function(err, handler, data) {
          if (err) {
            return console.log(err);
          }
          return renderOrUpdatePage(handler, data);
        });
      }
    };
  };
  router.expressRouter = function(req, res, next) {
    return router.match(req, req, function(err, handler, data) {
      var app, markup;
      if (err) {
        return next(err);
      }
      app = HTML({
        data: data,
        body: handler(data)
      });
      markup = React.renderComponentToString(app);
      return res.send("<!doctype html>\n" + markup + '<script>_data = ' + JSON.stringify(data) + '</script>');
    });
  };
  return router;
};

APP = null;

renderOrUpdatePage = function(handler, data) {
  var documentTitle, e, props;
  if (data) {
    documentTitle = data.documentTitle;
  }
  try {
    history.replaceState(JSON.stringify(data), documentTitle, location.href);
    handlerCache[location.href] = handler;
  } catch (_error) {
    e = _error;
  }
  props = {
    title: documentTitle,
    body: handler(data)
  };
  if (APP) {
    APP.setProps(props);
  } else {
    APP = HTML({
      title: documentTitle,
      body: handler(data)
    });
    APP = React.renderComponent(APP, document);
  }
  return APP;
};

Link = React.createClass({
  render: function() {
    return React.DOM.a({
      className: this.props.className,
      href: this.props.href,
      onClick: this.handleClick
    }, this.props.children);
  },
  handleClick: function(e) {
    if (!history) {
      return;
    }
    e.preventDefault();
    history.pushState(null, null, this.props.href);
    if (!this.props.data) {
      return router.match(this.props.href, function(err, handler, data) {
        if (err) {
          return console.log(err);
        }
        return renderOrUpdatePage(handler, data);
      });
    } else {
      return router.matchWithData(this.props.href, this.props.data, (function(_this) {
        return function(err, handler) {
          if (err) {
            return console.log(err);
          }
          return renderOrUpdatePage(handler, _this.props.data);
        };
      })(this));
    }
  }
});

module.exports = RRouter;

module.exports.Link = Link;

module.exports.renderOrUpdatePage = renderOrUpdatePage;
